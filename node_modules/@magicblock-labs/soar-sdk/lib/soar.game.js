"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GameClient = void 0;
var web3_js_1 = require("@solana/web3.js");
var state_1 = require("./state");
var GameClient = (function () {
    function GameClient(program, address, account) {
        var _this = this;
        this.recentLeaderBoardAddress = function () {
            if (_this.account === undefined) {
                throw new Error("init not called");
            }
            return _this.program.utils.deriveLeaderBoardAddress(_this.account.leaderboardCount, _this.address)[0];
        };
        this.nextLeaderBoardAddress = function () {
            if (_this.account === undefined) {
                throw new Error("init not called");
            }
            var nextId = _this.account.leaderboardCount.addn(1);
            return _this.program.utils.deriveLeaderBoardAddress(nextId, _this.address)[0];
        };
        this.recentAchievementAddress = function () {
            if (_this.account === undefined) {
                throw new Error("init not called");
            }
            return _this.program.utils.deriveAchievementAddress(_this.account.achievementCount, _this.address)[0];
        };
        this.nextAchievementAddress = function () {
            if (_this.account === undefined) {
                throw new Error("init not called");
            }
            var nextId = _this.account.achievementCount.addn(1);
            return _this.program.utils.deriveAchievementAddress(nextId, _this.address)[0];
        };
        this.address = address;
        this.program = program;
        this.account = account;
    }
    GameClient.register = function (program, title, description, genre, gameType, nftMeta, auths) {
        return __awaiter(this, void 0, void 0, function () {
            var game, _a, newGame, transaction, client;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        game = web3_js_1.Keypair.generate();
                        return [4, program.initializeNewGame(game.publicKey, title, description, genre, gameType, nftMeta, auths)];
                    case 1:
                        _a = _b.sent(), newGame = _a.newGame, transaction = _a.transaction;
                        return [4, program.sendAndConfirmTransaction(transaction, [game])];
                    case 2:
                        _b.sent();
                        client = new GameClient(program, newGame);
                        return [4, client.init()];
                    case 3:
                        _b.sent();
                        return [2, client];
                }
            });
        });
    };
    GameClient.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var account;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.fetchGameAccount(this.address)];
                    case 1:
                        account = _a.sent();
                        this.account = state_1.GameAccount.fromIdlAccount(account, this.address);
                        return [2];
                }
            });
        });
    };
    GameClient.prototype.refresh = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.init()];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    GameClient.prototype.update = function (authority, newMeta, newAuths) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.program.updateGameAccount(this.address, authority, newMeta, newAuths)];
            });
        });
    };
    GameClient.prototype.addLeaderBoard = function (authority, description, nftMeta, scoresToRetain, scoresOrder, decimals, minScore, maxScore, allowMultipleScores) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.program.addNewGameLeaderBoard(this.address, authority, description, nftMeta, scoresToRetain, scoresOrder, decimals, minScore, maxScore, allowMultipleScores)];
            });
        });
    };
    GameClient.prototype.addAchievement = function (authority, title, description, nftMeta) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.program.addNewGameAchievement(this.address, authority, title, description, nftMeta)];
            });
        });
    };
    GameClient.prototype.registerPlayer = function (user, leaderBoard) {
        return __awaiter(this, void 0, void 0, function () {
            var leaderboard;
            return __generator(this, function (_a) {
                leaderboard = leaderBoard !== null && leaderBoard !== void 0 ? leaderBoard : this.recentLeaderBoardAddress();
                return [2, this.program.registerPlayerEntryForLeaderBoard(user, leaderboard)];
            });
        });
    };
    GameClient.prototype.submitScore = function (user, authority, score, leaderBoard) {
        return __awaiter(this, void 0, void 0, function () {
            var leaderboard;
            return __generator(this, function (_a) {
                leaderboard = leaderBoard !== null && leaderBoard !== void 0 ? leaderBoard : this.recentLeaderBoardAddress();
                return [2, this.program.submitScoreToLeaderBoard(user, authority, leaderboard, score)];
            });
        });
    };
    GameClient.prototype.updateAchievement = function (authority, achievement, newTitle, newDescription, newNftMeta) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.program.updateGameAchievement(authority, achievement, newTitle, newDescription, newNftMeta)];
            });
        });
    };
    GameClient.prototype.fetchLeaderBoardAccounts = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.program.fetchAllLeaderboardAccounts([
                        {
                            memcmp: {
                                offset: 8 + 8,
                                bytes: this.address.toBase58(),
                            },
                        },
                    ])];
            });
        });
    };
    GameClient.prototype.fetchAchievementAccounts = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.program.fetchAllAchievementAccounts([
                        {
                            memcmp: {
                                offset: 8,
                                bytes: this.address.toBase58(),
                            },
                        },
                    ])];
            });
        });
    };
    return GameClient;
}());
exports.GameClient = GameClient;
//# sourceMappingURL=soar.game.js.map