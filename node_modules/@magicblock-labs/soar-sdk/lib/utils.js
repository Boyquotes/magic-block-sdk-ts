"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = exports.Seeds = void 0;
var web3_js_1 = require("@solana/web3.js");
var constants_1 = require("./constants");
var spl_token_1 = require("@solana/spl-token");
var Seeds;
(function (Seeds) {
    Seeds["GAME"] = "game";
    Seeds["LEADER"] = "leaderboard";
    Seeds["ACHIEVEMENT"] = "achievement";
    Seeds["PLAYER"] = "player";
    Seeds["PLAYER_SCORES"] = "player-scores-list";
    Seeds["PLAYER_ACHIEVEMENT"] = "player-achievement";
    Seeds["LEADER_TOP_ENTRIES"] = "top-scores";
    Seeds["NFT_CLAIM"] = "nft-claim";
})(Seeds || (exports.Seeds = Seeds = {}));
var Utils = (function () {
    function Utils(programId) {
        this.programId = programId;
        this.deriveMetadataAddress = function (mint) {
            return web3_js_1.PublicKey.findProgramAddressSync([
                Buffer.from("metadata"),
                constants_1.TOKEN_METADATA_PROGRAM_ID.toBuffer(),
                mint.toBuffer(),
            ], constants_1.TOKEN_METADATA_PROGRAM_ID);
        };
        this.deriveEditionAddress = function (mint) {
            return web3_js_1.PublicKey.findProgramAddressSync([
                Buffer.from("metadata"),
                constants_1.TOKEN_METADATA_PROGRAM_ID.toBuffer(),
                mint.toBuffer(),
                Buffer.from("edition"),
            ], constants_1.TOKEN_METADATA_PROGRAM_ID);
        };
        this.deriveAssociatedTokenAddress = function (mint, user) {
            return (0, spl_token_1.getAssociatedTokenAddressSync)(mint, user);
        };
        this.zip = function (a, b, defaultB) {
            return a.map(function (k, i) {
                if (b.length <= i)
                    return [k, defaultB];
                return [k, b[i]];
            });
        };
    }
    Utils.prototype.deriveLeaderBoardAddress = function (id, game) {
        return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("leaderboard"), game.toBuffer(), id.toBuffer("le", 8)], this.programId);
    };
    Utils.prototype.deriveLeaderTopEntriesAddress = function (leaderboard) {
        return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("top-scores"), leaderboard.toBuffer()], this.programId);
    };
    Utils.prototype.deriveAchievementAddress = function (id, game) {
        return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("achievement"), game.toBuffer(), id.toBuffer("le", 8)], this.programId);
    };
    Utils.prototype.derivePlayerAddress = function (user) {
        return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("player"), user.toBuffer()], this.programId);
    };
    Utils.prototype.derivePlayerScoresListAddress = function (user, leaderboard) {
        var player = this.derivePlayerAddress(user)[0];
        return web3_js_1.PublicKey.findProgramAddressSync([
            Buffer.from("player-scores-list"),
            player.toBuffer(),
            leaderboard.toBuffer(),
        ], this.programId);
    };
    Utils.prototype.derivePlayerAchievementAddress = function (user, achievement) {
        var player = this.derivePlayerAddress(user)[0];
        return web3_js_1.PublicKey.findProgramAddressSync([
            Buffer.from("player-achievement"),
            player.toBuffer(),
            achievement.toBuffer(),
        ], this.programId);
    };
    Utils.prototype.deriveNftClaimAddress = function (reward, mint) {
        return web3_js_1.PublicKey.findProgramAddressSync([Buffer.from("nft-claim"), reward.toBuffer(), mint.toBuffer()], this.programId);
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=utils.js.map