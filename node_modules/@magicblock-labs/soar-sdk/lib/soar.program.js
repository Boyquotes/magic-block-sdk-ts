"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SoarProgram = exports.SimpleProvider = void 0;
var anchor_1 = require("@coral-xyz/anchor");
var web3_js_1 = require("@solana/web3.js");
var soar_1 = require("./idl/soar");
var constants_1 = require("./constants");
var instructions_1 = require("./instructions");
var utils_1 = require("./utils");
var state_1 = require("./state");
var bs58_1 = __importDefault(require("bs58"));
var spl_token_1 = require("@solana/spl-token");
var soar_game_1 = require("./soar.game");
var SimpleProvider = (function () {
    function SimpleProvider(connection, publicKey) {
        this.connection = connection;
        this.publicKey = publicKey;
    }
    return SimpleProvider;
}());
exports.SimpleProvider = SimpleProvider;
var SoarProgram = (function () {
    function SoarProgram(provider, programId) {
        this.provider = provider;
        this.program = new anchor_1.Program(soar_1.IDL, programId, provider);
        this.utils = new utils_1.Utils(this.program.programId);
        this.builder = new instructions_1.InstructionBuilder(provider, programId);
    }
    SoarProgram.getFromConnection = function (connection, defaultPayer, programId) {
        return new SoarProgram(new SimpleProvider(connection, defaultPayer), programId !== null && programId !== void 0 ? programId : constants_1.PROGRAM_ID);
    };
    SoarProgram.get = function (provider, programId) {
        return new SoarProgram(provider, programId !== null && programId !== void 0 ? programId : constants_1.PROGRAM_ID);
    };
    SoarProgram.prototype.initializeNewGame = function (newGame, title, description, genre, gameType, nftMeta, authorities) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        newGame = this.getPublicKey(newGame);
                        nftMeta = this.getPublicKey(nftMeta);
                        return [4, this.builder.initGameStep({
                                gameMeta: {
                                    title: title,
                                    description: description,
                                    genre: genre,
                                    gameType: gameType,
                                    nftMeta: nftMeta,
                                },
                                authorities: authorities,
                            }, newGame)];
                    case 1:
                        step = _a.sent();
                        return [2, {
                                transaction: step[0].build(),
                                newGame: step[1].game,
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.initializePlayerAccount = function (user, username, nftMeta) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        user = this.getPublicKey(user);
                        nftMeta = this.getPublicKey(nftMeta);
                        return [4, this.builder.initPlayerStep({
                                username: username,
                                nftMeta: nftMeta,
                            }, user)];
                    case 1:
                        step = _a.sent();
                        return [2, {
                                transaction: step[0].build(),
                                newPlayer: step[1].playerAccount,
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.updateGameAccount = function (game, authority, newMeta, newAuths) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        game = this.getPublicKey(game);
                        authority = this.getPublicKey(authority);
                        if (newMeta === undefined && newAuths === undefined) {
                            throw new Error("Expected at least one of newMeta and newAuths to be defined");
                        }
                        this.builder.clean();
                        return [4, this.builder.updateGameStep({
                                newMeta: newMeta !== null && newMeta !== void 0 ? newMeta : null,
                                newAuths: newAuths !== null && newAuths !== void 0 ? newAuths : null,
                            }, game, authority)];
                    case 1:
                        step = _a.sent();
                        return [2, { transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.updatePlayerAccount = function (user, newUsername, newNftMeta) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        user = this.getPublicKey(user);
                        newNftMeta = this.getNullablePublicKey(newNftMeta);
                        if (newUsername === undefined && newNftMeta === undefined) {
                            throw new Error("Expected one of newUsername and newNftMeta to be defined");
                        }
                        this.builder.clean();
                        return [4, this.builder.updatePlayerStep({
                                newUsername: newUsername !== null && newUsername !== void 0 ? newUsername : null,
                                newNftMeta: newNftMeta !== null && newNftMeta !== void 0 ? newNftMeta : null,
                            }, user)];
                    case 1:
                        step = _a.sent();
                        return [2, { transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.initiateMerge = function (user, newMergeAccount, playerAccountKeys) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        user = this.getPublicKey(user);
                        newMergeAccount = this.getPublicKey(newMergeAccount);
                        return [4, this.builder.initMergeStep({
                                keys: playerAccountKeys,
                            }, user, newMergeAccount)];
                    case 1:
                        step = _a.sent();
                        return [2, {
                                newMerge: newMergeAccount,
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.registerMergeApproval = function (user, mergeAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        user = this.getPublicKey(user);
                        mergeAccount = this.getPublicKey(mergeAccount);
                        return [4, this.builder.registerMergeApprovalStep(user, mergeAccount)];
                    case 1:
                        step = _a.sent();
                        return [2, { transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.addNewGameAchievement = function (gameAddress, authority, title, description, nftMeta) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        gameAddress = this.getPublicKey(gameAddress);
                        authority = this.getPublicKey(authority);
                        nftMeta = this.getPublicKey(nftMeta);
                        return [4, this.builder.addAchievementStep({
                                title: title,
                                description: description,
                                nftMeta: nftMeta,
                            }, gameAddress, authority)];
                    case 1:
                        step = _a.sent();
                        return [2, {
                                newAchievement: step[1].newAchievement,
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.addNewGameLeaderBoard = function (gameAddress, authority, description, nftMeta, scoresToRetain, scoresOrder, decimals, minScore, maxScore, allowMultipleScores) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        gameAddress = this.getPublicKey(gameAddress);
                        authority = this.getPublicKey(authority);
                        nftMeta = this.getPublicKey(nftMeta);
                        return [4, this.builder.addLeaderBoardStep({
                                description: description,
                                nftMeta: nftMeta,
                                scoresToRetain: scoresToRetain,
                                isAscending: scoresOrder,
                                decimals: decimals !== null && decimals !== void 0 ? decimals : null,
                                minScore: minScore !== null && minScore !== void 0 ? minScore : null,
                                maxScore: maxScore !== null && maxScore !== void 0 ? maxScore : null,
                                allowMultipleScores: allowMultipleScores !== null && allowMultipleScores !== void 0 ? allowMultipleScores : false,
                            }, gameAddress, authority)];
                    case 1:
                        step = _a.sent();
                        return [2, {
                                newLeaderBoard: step[1].leaderboard,
                                topEntries: step[1].topEntries,
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.updateGameLeaderboard = function (authority, leaderboard, newDescription, newNftMeta, newMinScore, newMaxScore, newIsAscending, newAllowMultipleScores, topEntries) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        authority = this.getPublicKey(authority);
                        leaderboard = this.getPublicKey(leaderboard);
                        newNftMeta = this.getNullablePublicKey(newNftMeta);
                        topEntries = this.getNullablePublicKey(topEntries);
                        if (newDescription === undefined && newNftMeta === undefined) {
                            throw new Error("One of newDescription or newNftMeta is expected to be defined");
                        }
                        return [4, this.builder.updateLeaderboardStep({
                                newDescription: newDescription !== null && newDescription !== void 0 ? newDescription : null,
                                newNftMeta: newNftMeta !== null && newNftMeta !== void 0 ? newNftMeta : null,
                                newMinScore: newMinScore !== null && newMinScore !== void 0 ? newMinScore : null,
                                newMaxScore: newMaxScore !== null && newMaxScore !== void 0 ? newMaxScore : null,
                                newIsAscending: newIsAscending !== null && newIsAscending !== void 0 ? newIsAscending : null,
                                newAllowMultipleScores: newAllowMultipleScores !== null && newAllowMultipleScores !== void 0 ? newAllowMultipleScores : null,
                            }, authority, leaderboard, undefined, topEntries !== null && topEntries !== void 0 ? topEntries : undefined)];
                    case 1:
                        step = _a.sent();
                        return [2, { transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.registerPlayerEntryForLeaderBoard = function (user, leaderboard) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        user = this.getPublicKey(user);
                        leaderboard = this.getPublicKey(leaderboard);
                        return [4, this.builder.registerPlayerEntryStep(user, leaderboard)];
                    case 1:
                        step = _a.sent();
                        return [2, { newList: step[1].newList, transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.submitScoreToLeaderBoard = function (user, authority, leaderboard, score) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        user = this.getPublicKey(user);
                        authority = this.getPublicKey(authority);
                        leaderboard = this.getPublicKey(leaderboard);
                        return [4, this.builder.submitScoreStep({
                                score: score,
                            }, user, authority, leaderboard)];
                    case 1:
                        step = _a.sent();
                        return [2, { transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.updateGameAchievement = function (authority, achievement, newTitle, newDescription, newNftMeta) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        authority = this.getPublicKey(authority);
                        achievement = this.getPublicKey(achievement);
                        newNftMeta = this.getNullablePublicKey(newNftMeta);
                        if (newTitle === undefined &&
                            newDescription === undefined &&
                            newNftMeta === undefined) {
                            throw new Error("At least one updated value expected to be specified");
                        }
                        return [4, this.builder.updateAchievementStep({
                                newTitle: newTitle !== null && newTitle !== void 0 ? newTitle : null,
                                newDescription: newDescription !== null && newDescription !== void 0 ? newDescription : null,
                                newNftMeta: newNftMeta !== null && newNftMeta !== void 0 ? newNftMeta : null,
                            }, authority, achievement)];
                    case 1:
                        step = _a.sent();
                        return [2, { transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.unlockPlayerAchievement = function (user, authority, achievement, leaderboard, game) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        user = this.getPublicKey(user);
                        authority = this.getPublicKey(authority);
                        achievement = this.getPublicKey(achievement);
                        leaderboard = this.getPublicKey(leaderboard);
                        game = this.getNullablePublicKey(game);
                        return [4, this.builder.unlockPlayerAchievementStep(user, authority, achievement, leaderboard)];
                    case 1:
                        step = _a.sent();
                        return [2, {
                                newPlayerAchievement: step[1].playerAchievement,
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.addFungibleReward = function (authority, newReward, achievement, amountPerUser, availableRewards, initialDelegation, mint, sourceTokenAccount, tokenAccountOwner) {
        return __awaiter(this, void 0, void 0, function () {
            var step, prev;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        authority = this.getPublicKey(authority);
                        newReward = this.getPublicKey(newReward);
                        achievement = this.getPublicKey(achievement);
                        sourceTokenAccount = this.getPublicKey(sourceTokenAccount);
                        tokenAccountOwner = this.getPublicKey(tokenAccountOwner);
                        return [4, this.builder.addFungibleRewardStep({
                                availableRewards: availableRewards,
                                kind: {
                                    deposit: initialDelegation,
                                    amount: amountPerUser,
                                },
                            }, authority, newReward, achievement, sourceTokenAccount, tokenAccountOwner, mint)];
                    case 1:
                        step = _a.sent();
                        return [4, this.fetchAchievementAccount(achievement).then(function (res) { return res.reward; })];
                    case 2:
                        prev = _a.sent();
                        return [2, {
                                oldReward: prev,
                                newReward: newReward,
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.addNonFungibleReward = function (authority, newReward, achievement, availableRewards, uri, name, symbol, collectionMint, collectionUpdateAuthority) {
        return __awaiter(this, void 0, void 0, function () {
            var step, prev;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authority = this.getPublicKey(authority);
                        newReward = this.getPublicKey(newReward);
                        achievement = this.getPublicKey(achievement);
                        collectionMint = this.getNullablePublicKey(collectionMint);
                        collectionUpdateAuthority = this.getNullablePublicKey(collectionUpdateAuthority);
                        this.builder.clean();
                        if (collectionMint !== undefined) {
                            if (collectionUpdateAuthority === undefined) {
                                throw new Error("Collection update authority should be defined");
                            }
                        }
                        return [4, this.builder.addNonFungibleRewardStep({
                                availableRewards: availableRewards,
                                kind: { uri: uri, name: name, symbol: symbol },
                            }, authority, newReward, achievement, collectionMint, collectionUpdateAuthority)];
                    case 1:
                        step = _a.sent();
                        return [4, this.fetchAchievementAccount(achievement).then(function (res) { return res.reward; })];
                    case 2:
                        prev = _a.sent();
                        return [2, {
                                oldReward: prev,
                                newReward: newReward,
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.claimNftReward = function (authority, achievement, mint, user) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authority = this.getPublicKey(authority);
                        achievement = this.getPublicKey(achievement);
                        mint = this.getPublicKey(mint);
                        user = this.getPublicKey(user);
                        this.builder.clean();
                        return [4, this.builder.claimNftRewardStep(authority, achievement, mint, user)];
                    case 1:
                        step = _a.sent();
                        return [2, {
                                newMint: mint,
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.claimFtReward = function (authority, achievement, user) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, preInstructions, userAta, account, step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        authority = this.getPublicKey(authority);
                        achievement = this.getPublicKey(achievement);
                        user = this.getPublicKey(user);
                        return [4, this.builder.accounts.claimFtRewardAccounts(authority, achievement, user)];
                    case 1:
                        accounts = _a.sent();
                        preInstructions = [];
                        userAta = this.utils.deriveAssociatedTokenAddress(accounts.mint, user);
                        return [4, this.provider.connection.getAccountInfo(userAta)];
                    case 2:
                        account = _a.sent();
                        if (account === null) {
                            preInstructions.push(this.createATA(accounts.mint, user, userAta));
                        }
                        return [4, this.builder
                                .append(preInstructions)
                                .claimFtRewardStep(authority, achievement, user, accounts.reward, accounts.game)];
                    case 3:
                        step = _a.sent();
                        return [2, {
                                transaction: step[0].build(),
                            }];
                }
            });
        });
    };
    SoarProgram.prototype.verifyPlayerNftReward = function (user, achievement, mint) {
        return __awaiter(this, void 0, void 0, function () {
            var step;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.builder.clean();
                        user = this.getPublicKey(user);
                        achievement = this.getPublicKey(achievement);
                        mint = this.getPublicKey(mint);
                        return [4, this.builder.verifyPlayerNftRewardStep(user, achievement, mint)];
                    case 1:
                        step = _a.sent();
                        return [2, { transaction: step[0].build() }];
                }
            });
        });
    };
    SoarProgram.prototype.createATA = function (mint, owner, ata) {
        mint = this.getPublicKey(mint);
        owner = this.getPublicKey(owner);
        ata = this.getPublicKey(ata);
        return (0, spl_token_1.createAssociatedTokenAccountIdempotentInstruction)(this.provider.publicKey, ata, owner, mint);
    };
    SoarProgram.prototype.sendAndConfirmTransaction = function (transaction, signers, opts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.provider
                        .sendAndConfirm(transaction, signers, opts)
                        .catch(function (e) {
                        throw e;
                    })];
            });
        });
    };
    SoarProgram.prototype.sendAndConfirmTransactions = function (transactions_1) {
        return __awaiter(this, arguments, void 0, function (transactions, signers, opts) {
            var txesWithSigners, txSigs, _i, txesWithSigners_1, _a, tx, signers_1, txSig;
            if (signers === void 0) { signers = []; }
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        txesWithSigners = this.utils.zip(transactions, signers, []);
                        txSigs = [];
                        _i = 0, txesWithSigners_1 = txesWithSigners;
                        _b.label = 1;
                    case 1:
                        if (!(_i < txesWithSigners_1.length)) return [3, 4];
                        _a = txesWithSigners_1[_i], tx = _a[0], signers_1 = _a[1];
                        return [4, this.sendAndConfirmTransaction(tx, signers_1, opts)];
                    case 2:
                        txSig = _b.sent();
                        txSigs.push(txSig);
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3, 1];
                    case 4: return [2, txSigs];
                }
            });
        });
    };
    SoarProgram.prototype.newGameClient = function (gameAddress) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new soar_game_1.GameClient(this, gameAddress)];
            });
        });
    };
    SoarProgram.prototype.fetchAchievementAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.achievement.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.AchievementAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchGameAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.game.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.GameAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchLeaderBoardAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.leaderBoard.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.LeaderBoardAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchLeaderBoardTopEntriesAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.leaderTopEntries.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.TopEntriesAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchMergedAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.merged.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.MergedAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchPlayerAchievementAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.playerAchievement.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.PlayerAchievementAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchPlayerScoresListAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.playerScoresList.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.PlayerScoresListAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchPlayerAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.player.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.PlayerAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchRewardAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.reward.fetch(address)];
                    case 1:
                        info = _a.sent();
                        return [2, state_1.RewardAccount.fromIdlAccount(info, address)];
                }
            });
        });
    };
    SoarProgram.prototype.fetchAllGameAccounts = function (memcmp) {
        return __awaiter(this, void 0, void 0, function () {
            var games;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.game.all(memcmp)];
                    case 1:
                        games = _a.sent();
                        return [2, games.map(function (game) {
                                return state_1.GameAccount.fromIdlAccount(game.account, game.publicKey);
                            })];
                }
            });
        });
    };
    SoarProgram.prototype.fetchAllAchievementAccounts = function (memcmp) {
        return __awaiter(this, void 0, void 0, function () {
            var achievements;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.achievement.all(memcmp)];
                    case 1:
                        achievements = _a.sent();
                        return [2, achievements.map(function (achievement) {
                                return state_1.AchievementAccount.fromIdlAccount(achievement.account, achievement.publicKey);
                            })];
                }
            });
        });
    };
    SoarProgram.prototype.fetchAllLeaderboardAccounts = function (memcmp) {
        return __awaiter(this, void 0, void 0, function () {
            var leaderboards;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.leaderBoard.all(memcmp)];
                    case 1:
                        leaderboards = _a.sent();
                        return [2, leaderboards.map(function (leaderboard) {
                                return state_1.LeaderBoardAccount.fromIdlAccount(leaderboard.account, leaderboard.publicKey);
                            })];
                }
            });
        });
    };
    SoarProgram.prototype.fetchAllPlayerAccounts = function (memcmp) {
        return __awaiter(this, void 0, void 0, function () {
            var players;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.player.all(memcmp)];
                    case 1:
                        players = _a.sent();
                        return [2, players.map(function (player) {
                                return state_1.PlayerAccount.fromIdlAccount(player.account, player.publicKey);
                            })];
                }
            });
        });
    };
    SoarProgram.prototype.fetchGameAccountsInfoByGenre = function (genre) {
        return __awaiter(this, void 0, void 0, function () {
            var games;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.program.account.game.all([
                            {
                                memcmp: {
                                    offset: 8 + 200 + 30,
                                    bytes: bs58_1.default.encode(Buffer.from(genre)),
                                },
                            },
                        ])];
                    case 1:
                        games = _a.sent();
                        return [2, games.map(function (game) {
                                return state_1.GameAccount.fromIdlAccount(game.account, game.publicKey);
                            })];
                }
            });
        });
    };
    SoarProgram.prototype.fetchPlayerAchievementInfo = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var player, achievements;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        player = this.utils.derivePlayerAddress(user)[0];
                        return [4, this.program.account.playerAchievement.all([
                                {
                                    memcmp: {
                                        offset: 8,
                                        bytes: player.toBase58(),
                                    },
                                },
                            ])];
                    case 1:
                        achievements = _a.sent();
                        return [2, achievements.map(function (achievement) {
                                return state_1.PlayerAchievementAccount.fromIdlAccount(achievement.account, achievement.publicKey);
                            })];
                }
            });
        });
    };
    SoarProgram.prototype.getPublicKey = function (user) {
        return user != null && typeof user === "string"
            ? new web3_js_1.PublicKey(user)
            : user;
    };
    SoarProgram.prototype.getNullablePublicKey = function (user) {
        return user != null && typeof user === "string"
            ? new web3_js_1.PublicKey(user)
            : user;
    };
    return SoarProgram;
}());
exports.SoarProgram = SoarProgram;
//# sourceMappingURL=soar.program.js.map