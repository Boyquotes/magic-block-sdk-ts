import { type PublicKey } from "@solana/web3.js";
import type BN from "bn.js";
import { type SoarProgram } from "./soar.program";
import { type InstructionResult } from "./types";
import { GameAccount, type Genre, type GameType, type AchievementAccount, type LeaderBoardAccount, type GameAttributes } from "./state";
export declare class GameClient {
    program: SoarProgram;
    address: PublicKey;
    account: GameAccount | undefined;
    constructor(program: SoarProgram, address: PublicKey, account?: GameAccount);
    static register(program: SoarProgram, title: string, description: string, genre: Genre, gameType: GameType, nftMeta: PublicKey, auths: PublicKey[]): Promise<GameClient>;
    init(): Promise<void>;
    refresh(): Promise<void>;
    recentLeaderBoardAddress: () => PublicKey;
    nextLeaderBoardAddress: () => PublicKey;
    recentAchievementAddress: () => PublicKey;
    nextAchievementAddress: () => PublicKey;
    update(authority: PublicKey, newMeta?: GameAttributes, newAuths?: PublicKey[]): Promise<InstructionResult.UpdateGame>;
    addLeaderBoard(authority: PublicKey, description: string, nftMeta: PublicKey, scoresToRetain: number, scoresOrder: boolean, decimals?: number, minScore?: BN, maxScore?: BN, allowMultipleScores?: boolean): Promise<InstructionResult.AddLeaderBoard>;
    addAchievement(authority: PublicKey, title: string, description: string, nftMeta: PublicKey): Promise<InstructionResult.AddGameAchievement>;
    registerPlayer(user: PublicKey, leaderBoard?: PublicKey): Promise<InstructionResult.RegisterPlayerEntry>;
    submitScore(user: PublicKey, authority: PublicKey, score: BN, leaderBoard?: PublicKey): Promise<InstructionResult.SubmitScore>;
    updateAchievement(authority: PublicKey, achievement: PublicKey, newTitle?: string, newDescription?: string, newNftMeta?: PublicKey): Promise<InstructionResult.UpdateAchievement>;
    fetchLeaderBoardAccounts(): Promise<LeaderBoardAccount[]>;
    fetchAchievementAccounts(): Promise<AchievementAccount[]>;
}
//# sourceMappingURL=soar.game.d.ts.map