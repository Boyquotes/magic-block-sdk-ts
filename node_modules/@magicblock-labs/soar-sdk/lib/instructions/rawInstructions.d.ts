import { type Soar } from "../idl/soar";
import { type AddAchievementArgs, type AddLeaderBoardArgs, type AddFtRewardArgs, type AddNftRewardArgs, type InitializeGameArgs, type InitializePlayerArgs, type SubmitScoreArgs, type UpdateAchievementArgs, type UpdatePlayerArgs, type UpdateLeaderboardArgs, type UpdateGameArgs, type InitMergeArgs } from "../types";
import { type PublicKey, type TransactionInstruction } from "@solana/web3.js";
import { type Program } from "@coral-xyz/anchor";
export declare const initializeGameInstruction: (program: Program<Soar>, args: InitializeGameArgs, accounts: {
    creator: PublicKey;
    game: PublicKey;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const initPlayerInstruction: (program: Program<Soar>, args: InitializePlayerArgs, accounts: {
    playerAccount: PublicKey;
    user: PublicKey;
    payer: PublicKey;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const initiateMergeInstruction: (program: Program<Soar>, args: InitMergeArgs, accounts: {
    user: PublicKey;
    payer: PublicKey;
    playerAccount: PublicKey;
    mergeAccount: PublicKey;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const addAchievementInstruction: (program: Program<Soar>, args: AddAchievementArgs, accounts: {
    newAchievement: PublicKey;
    game: PublicKey;
    payer: PublicKey;
    authority: PublicKey;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const addLeaderBoardInstruction: (program: Program<Soar>, args: AddLeaderBoardArgs, accounts: {
    authority: PublicKey;
    game: PublicKey;
    payer: PublicKey;
    leaderboard: PublicKey;
    topEntries: PublicKey | null;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const addFtRewardInstruction: (program: Program<Soar>, args: AddFtRewardArgs, accounts: {
    authority: PublicKey;
    payer: PublicKey;
    game: PublicKey;
    achievement: PublicKey;
    newReward: PublicKey;
    rewardTokenMint: PublicKey;
    delegateFromTokenAccount: PublicKey;
    tokenAccountOwner: PublicKey;
    tokenProgram: PublicKey;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const addNftRewardInstruction: (program: Program<Soar>, args: AddNftRewardArgs, accounts: {
    authority: PublicKey;
    payer: PublicKey;
    game: PublicKey;
    achievement: PublicKey;
    newReward: PublicKey;
    systemProgram: PublicKey;
    rewardCollectionMint: PublicKey | null;
    collectionUpdateAuth: PublicKey | null;
    collectionMetadata: PublicKey | null;
    tokenMetadataProgram: PublicKey | null;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const registerMergeApprovalInstruction: (program: Program<Soar>, accounts: {
    user: PublicKey;
    playerAccount: PublicKey;
    mergeAccount: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const claimFtRewardInstruction: (program: Program<Soar>, accounts: {
    user: PublicKey;
    authority: PublicKey;
    playerAccount: PublicKey;
    game: PublicKey;
    achievement: PublicKey;
    reward: PublicKey;
    playerAchievement: PublicKey;
    sourceTokenAccount: PublicKey;
    userTokenAccount: PublicKey;
    tokenProgram: PublicKey;
}) => Promise<TransactionInstruction>;
export declare const claimNftRewardInstruction: (program: Program<Soar>, accounts: {
    user: PublicKey;
    authority: PublicKey;
    playerAccount: PublicKey;
    game: PublicKey;
    achievement: PublicKey;
    reward: PublicKey;
    playerAchievement: PublicKey;
    payer: PublicKey;
    claim: PublicKey;
    newMint: PublicKey;
    newMetadata: PublicKey;
    newMasterEdition: PublicKey;
    mintTo: PublicKey;
    tokenMetadataProgram: PublicKey;
    associatedTokenProgram: PublicKey;
    systemProgram: PublicKey;
    tokenProgram: PublicKey;
    rent: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const registerPlayerEntryInstruction: (program: Program<Soar>, accounts: {
    user: PublicKey;
    payer: PublicKey;
    playerAccount: PublicKey;
    newList: PublicKey;
    game: PublicKey;
    leaderboard: PublicKey;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const submitScoreInstruction: (program: Program<Soar>, args: SubmitScoreArgs, accounts: {
    payer: PublicKey;
    playerAccount: PublicKey;
    authority: PublicKey;
    game: PublicKey;
    leaderboard: PublicKey;
    playerScores: PublicKey;
    topEntries: PublicKey | null;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const updateAchievementInstruction: (program: Program<Soar>, args: UpdateAchievementArgs, accounts: {
    authority: PublicKey;
    game: PublicKey;
    achievement: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const unlockPlayerAchievementInstruction: (program: Program<Soar>, accounts: {
    payer: PublicKey;
    playerAccount: PublicKey;
    playerScores: PublicKey;
    game: PublicKey;
    achievement: PublicKey;
    authority: PublicKey;
    playerAchievement: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const updateGameInstruction: (program: Program<Soar>, args: UpdateGameArgs, accounts: {
    payer: PublicKey;
    game: PublicKey;
    authority: PublicKey;
    systemProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const updateLeaderBoardInstruction: (program: Program<Soar>, args: UpdateLeaderboardArgs, accounts: {
    authority: PublicKey;
    game: PublicKey;
    leaderboard: PublicKey;
    topEntries: PublicKey | null;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const updatePlayerInstruction: (program: Program<Soar>, args: UpdatePlayerArgs, accounts: {
    user: PublicKey;
    playerAccount: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
export declare const verifyNftRewardInstruction: (program: Program<Soar>, accounts: {
    payer: PublicKey;
    user: PublicKey;
    playerAccount: PublicKey;
    achievement: PublicKey;
    game: PublicKey;
    reward: PublicKey;
    playerAchievement: PublicKey;
    mint: PublicKey;
    claim: PublicKey;
    metadataToVerify: PublicKey;
    collectionMint: PublicKey;
    collectionMetadata: PublicKey;
    collectionEdition: PublicKey;
    tokenMetadataProgram: PublicKey;
}, pre?: TransactionInstruction[]) => Promise<TransactionInstruction>;
//# sourceMappingURL=rawInstructions.d.ts.map