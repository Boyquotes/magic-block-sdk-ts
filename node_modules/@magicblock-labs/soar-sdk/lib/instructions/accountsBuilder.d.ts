import { type Soar } from "../idl/soar";
import { type AnchorProvider, Program } from "@coral-xyz/anchor";
import { type PublicKey } from "@solana/web3.js";
import { Utils } from "../utils";
export declare class AccountsBuilder {
    private readonly provider;
    readonly program: Program<Soar>;
    readonly utils: Utils;
    constructor(provider: AnchorProvider, programId: PublicKey);
    initializeGameAccounts: (game: PublicKey, creator?: PublicKey) => Promise<{
        creator: PublicKey;
        game: PublicKey;
        systemProgram: PublicKey;
    }>;
    initializePlayerAccounts: (user: PublicKey, payer?: PublicKey) => Promise<{
        playerAccount: PublicKey;
        user: PublicKey;
        payer: PublicKey;
        systemProgram: PublicKey;
    }>;
    initiateMergeAccounts: (user: PublicKey, mergeAccount: PublicKey, payer?: PublicKey) => Promise<{
        user: PublicKey;
        payer: PublicKey;
        playerAccount: PublicKey;
        mergeAccount: PublicKey;
        systemProgram: PublicKey;
    }>;
    addAchievementAccounts: (game: PublicKey, authority: PublicKey, nextAchievement?: PublicKey, payer?: PublicKey) => Promise<{
        newAchievement: PublicKey;
        game: PublicKey;
        payer: PublicKey;
        authority: PublicKey;
        systemProgram: PublicKey;
    }>;
    addLeaderboardAccounts: (game: PublicKey, authority: PublicKey, nextLeaderboard?: PublicKey, nullTopEntries?: boolean, payer?: PublicKey) => Promise<{
        authority: PublicKey;
        game: PublicKey;
        payer: PublicKey;
        leaderboard: PublicKey;
        topEntries: PublicKey | null;
        systemProgram: PublicKey;
    }>;
    addFtRewardAccounts: (authority: PublicKey, newReward: PublicKey, achievement: PublicKey, sourceTokenAccount: PublicKey, tokenAccountOwner: PublicKey, mint: PublicKey, game?: PublicKey, payer?: PublicKey) => Promise<{
        authority: PublicKey;
        payer: PublicKey;
        game: PublicKey;
        achievement: PublicKey;
        newReward: PublicKey;
        rewardTokenMint: PublicKey;
        delegateFromTokenAccount: PublicKey;
        tokenAccountOwner: PublicKey;
        tokenProgram: PublicKey;
        systemProgram: PublicKey;
    }>;
    addNftRewardAccounts: (authority: PublicKey, newReward: PublicKey, achievement: PublicKey, collectionMint?: PublicKey, collectionUpdateAuthority?: PublicKey, game?: PublicKey, payer?: PublicKey) => Promise<{
        authority: PublicKey;
        payer: PublicKey;
        game: PublicKey;
        achievement: PublicKey;
        newReward: PublicKey;
        systemProgram: PublicKey;
        rewardCollectionMint: PublicKey | null;
        collectionUpdateAuth: PublicKey | null;
        collectionMetadata: PublicKey | null;
        tokenMetadataProgram: PublicKey | null;
    }>;
    registerMergeApprovalAccounts: (user: PublicKey, mergeAccount: PublicKey) => Promise<{
        user: PublicKey;
        playerAccount: PublicKey;
        mergeAccount: PublicKey;
    }>;
    claimFtRewardAccounts: (authority: PublicKey, achievement: PublicKey, user: PublicKey, reward?: PublicKey, game?: PublicKey) => Promise<{
        user: PublicKey;
        authority: PublicKey;
        playerAccount: PublicKey;
        game: PublicKey;
        achievement: PublicKey;
        reward: PublicKey;
        playerAchievement: PublicKey;
        sourceTokenAccount: PublicKey;
        userTokenAccount: PublicKey;
        tokenProgram: PublicKey;
        mint: PublicKey;
    }>;
    claimNftRewardAccounts: (authority: PublicKey, achievement: PublicKey, mint: PublicKey, user: PublicKey, reward?: PublicKey, game?: PublicKey, payer?: PublicKey) => Promise<{
        user: PublicKey;
        authority: PublicKey;
        playerAccount: PublicKey;
        game: PublicKey;
        achievement: PublicKey;
        reward: PublicKey;
        playerAchievement: PublicKey;
        payer: PublicKey;
        claim: PublicKey;
        newMint: PublicKey;
        newMetadata: PublicKey;
        newMasterEdition: PublicKey;
        mintTo: PublicKey;
        tokenMetadataProgram: PublicKey;
        associatedTokenProgram: PublicKey;
        systemProgram: PublicKey;
        tokenProgram: PublicKey;
        rent: PublicKey;
    }>;
    registerPlayerEntryAccounts: (user: PublicKey, leaderboard: PublicKey, game?: PublicKey, payer?: PublicKey) => Promise<{
        user: PublicKey;
        payer: PublicKey;
        playerAccount: PublicKey;
        newList: PublicKey;
        game: PublicKey;
        leaderboard: PublicKey;
        systemProgram: PublicKey;
    }>;
    submitScoreAccounts: (user: PublicKey, authority: PublicKey, leaderboard: PublicKey, game?: PublicKey, payer?: PublicKey) => Promise<{
        payer: PublicKey;
        playerAccount: PublicKey;
        authority: PublicKey;
        game: PublicKey;
        leaderboard: PublicKey;
        playerScores: PublicKey;
        topEntries: PublicKey | null;
        systemProgram: PublicKey;
    }>;
    updateAchievementAccounts: (authority: PublicKey, achievement: PublicKey, game?: PublicKey) => Promise<{
        authority: PublicKey;
        game: PublicKey;
        achievement: PublicKey;
    }>;
    unlockPlayerAchievementAccounts: (user: PublicKey, authority: PublicKey, achievement: PublicKey, leaderboard: PublicKey, game?: PublicKey, payer?: PublicKey) => Promise<{
        payer: PublicKey;
        playerAccount: PublicKey;
        playerScores: PublicKey;
        game: PublicKey;
        achievement: PublicKey;
        authority: PublicKey;
        playerAchievement: PublicKey;
    }>;
    updateGameAccounts: (game: PublicKey, authority: PublicKey, payer?: PublicKey) => Promise<{
        payer: PublicKey;
        game: PublicKey;
        authority: PublicKey;
        systemProgram: PublicKey;
    }>;
    updateLeaderboardAccounts: (authority: PublicKey, leaderboard: PublicKey, game?: PublicKey, topEntries?: PublicKey) => Promise<{
        authority: PublicKey;
        game: PublicKey;
        leaderboard: PublicKey;
        topEntries: PublicKey | null;
    }>;
    updatePlayerAccounts: (user: PublicKey) => Promise<{
        user: PublicKey;
        playerAccount: PublicKey;
    }>;
    verifyNftRewardAccounts: (user: PublicKey, achievement: PublicKey, mint: PublicKey, reward?: PublicKey, game?: PublicKey, payer?: PublicKey) => Promise<{
        payer: PublicKey;
        user: PublicKey;
        playerAccount: PublicKey;
        achievement: PublicKey;
        game: PublicKey;
        reward: PublicKey;
        playerAchievement: PublicKey;
        mint: PublicKey;
        claim: PublicKey;
        metadataToVerify: PublicKey;
        collectionMint: PublicKey;
        collectionMetadata: PublicKey;
        collectionEdition: PublicKey;
        tokenMetadataProgram: PublicKey;
    }>;
}
//# sourceMappingURL=accountsBuilder.d.ts.map