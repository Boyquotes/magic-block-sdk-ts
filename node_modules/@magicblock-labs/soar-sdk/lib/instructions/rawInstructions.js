"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyNftRewardInstruction = exports.updatePlayerInstruction = exports.updateLeaderBoardInstruction = exports.updateGameInstruction = exports.unlockPlayerAchievementInstruction = exports.updateAchievementInstruction = exports.submitScoreInstruction = exports.registerPlayerEntryInstruction = exports.claimNftRewardInstruction = exports.claimFtRewardInstruction = exports.registerMergeApprovalInstruction = exports.addNftRewardInstruction = exports.addFtRewardInstruction = exports.addLeaderBoardInstruction = exports.addAchievementInstruction = exports.initiateMergeInstruction = exports.initPlayerInstruction = exports.initializeGameInstruction = void 0;
var initializeGameInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .initializeGame(args.gameMeta, args.authorities)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.initializeGameInstruction = initializeGameInstruction;
var initPlayerInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .initializePlayer(args.username, args.nftMeta)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.initPlayerInstruction = initPlayerInstruction;
var initiateMergeInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .initiateMerge(args.keys)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.initiateMergeInstruction = initiateMergeInstruction;
var addAchievementInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .addAchievement(args.title, args.description, args.nftMeta)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.addAchievementInstruction = addAchievementInstruction;
var addLeaderBoardInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .addLeaderboard(args)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.addLeaderBoardInstruction = addLeaderBoardInstruction;
var addFtRewardInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .addFtReward({
                availableSpots: args.availableRewards,
                kind: {
                    ft: args.kind,
                },
            })
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.addFtRewardInstruction = addFtRewardInstruction;
var addNftRewardInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .addNftReward({
                availableSpots: args.availableRewards,
                kind: {
                    nft: args.kind,
                },
            })
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.addNftRewardInstruction = addNftRewardInstruction;
var registerMergeApprovalInstruction = function (program, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .approveMerge()
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.registerMergeApprovalInstruction = registerMergeApprovalInstruction;
var claimFtRewardInstruction = function (program, accounts) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
    return [2, program.methods.claimFtReward().accounts(accounts).instruction()];
}); }); };
exports.claimFtRewardInstruction = claimFtRewardInstruction;
var claimNftRewardInstruction = function (program, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .claimNftReward()
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.claimNftRewardInstruction = claimNftRewardInstruction;
var registerPlayerEntryInstruction = function (program, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .registerPlayer()
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.registerPlayerEntryInstruction = registerPlayerEntryInstruction;
var submitScoreInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .submitScore(args.score)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.submitScoreInstruction = submitScoreInstruction;
var updateAchievementInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .updateAchievement(args.newTitle, args.newDescription, args.newNftMeta)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.updateAchievementInstruction = updateAchievementInstruction;
var unlockPlayerAchievementInstruction = function (program, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .unlockPlayerAchievement()
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.unlockPlayerAchievementInstruction = unlockPlayerAchievementInstruction;
var updateGameInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .updateGame(args.newMeta, args.newAuths)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.updateGameInstruction = updateGameInstruction;
var updateLeaderBoardInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .updateLeaderboard(args.newDescription, args.newNftMeta, args.newMinScore, args.newMaxScore, args.newIsAscending, args.newAllowMultipleScores)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.updateLeaderBoardInstruction = updateLeaderBoardInstruction;
var updatePlayerInstruction = function (program, args, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .updatePlayer(args.newUsername, args.newNftMeta)
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.updatePlayerInstruction = updatePlayerInstruction;
var verifyNftRewardInstruction = function (program, accounts, pre) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2, program.methods
                .verifyNftReward()
                .accounts(accounts)
                .preInstructions(pre !== null && pre !== void 0 ? pre : [])
                .instruction()];
    });
}); };
exports.verifyNftRewardInstruction = verifyNftRewardInstruction;
//# sourceMappingURL=rawInstructions.js.map