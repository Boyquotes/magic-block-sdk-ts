"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstructionBuilder = void 0;
var soar_1 = require("../idl/soar");
var anchor_1 = require("@coral-xyz/anchor");
var web3_js_1 = require("@solana/web3.js");
var rawInstructions_1 = require("./rawInstructions");
var utils_1 = require("../utils");
var accountsBuilder_1 = require("./accountsBuilder");
var InstructionBuilder = (function () {
    function InstructionBuilder(provider, programId) {
        var _this = this;
        this.provider = provider;
        this.append = function (instructions) {
            _this.instructions = _this.instructions.concat(instructions);
            return _this;
        };
        this.instructions = [];
        this.signers = [];
        this.program = new anchor_1.Program(soar_1.IDL, programId, provider);
        this.utils = new utils_1.Utils(this.program.programId);
        this.accounts = new accountsBuilder_1.AccountsBuilder(provider, programId);
    }
    InstructionBuilder.prototype.initGameStep = function (args, newGame, creator) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.initializeGameAccounts(newGame, creator)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.initializeGameInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.initPlayerStep = function (args, user, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.initializePlayerAccounts(user, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.initPlayerInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.updateGameStep = function (args, game, authority, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.updateGameAccounts(game, authority, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.updateGameInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.updatePlayerStep = function (args, user) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.updatePlayerAccounts(user)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.updatePlayerInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.initMergeStep = function (args, user, newMergeAccount, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.initiateMergeAccounts(user, newMergeAccount, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.initiateMergeInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.registerMergeApprovalStep = function (user, mergeAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.registerMergeApprovalAccounts(user, mergeAccount)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.registerMergeApprovalInstruction)(this.program, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.addAchievementStep = function (args, game, authority, nextAchievement, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.addAchievementAccounts(game, authority, nextAchievement, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.addAchievementInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.addLeaderBoardStep = function (args, gameAddress, authority, nextLeaderboard, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var nullTopEntries, accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (args.scoresToRetain !== null && args.scoresToRetain > 0) {
                            nullTopEntries = false;
                        }
                        else {
                            nullTopEntries = true;
                        }
                        return [4, this.accounts.addLeaderboardAccounts(gameAddress, authority, nextLeaderboard, nullTopEntries, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.addLeaderBoardInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.updateLeaderboardStep = function (args, authority, leaderboard, game, topEntries) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.updateLeaderboardAccounts(authority, leaderboard, game, topEntries)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.updateLeaderBoardInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.registerPlayerEntryStep = function (user, leaderboard, game, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.registerPlayerEntryAccounts(user, leaderboard, game, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.registerPlayerEntryInstruction)(this.program, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.submitScoreStep = function (args, user, authority, leaderboard, game, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.submitScoreAccounts(user, authority, leaderboard, game, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.submitScoreInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.updateAchievementStep = function (args, authority, achievement, game) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.updateAchievementAccounts(authority, achievement, game)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.updateAchievementInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.unlockPlayerAchievementStep = function (user, authority, achievement, leaderboard, game, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.unlockPlayerAchievementAccounts(user, authority, achievement, leaderboard, game, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.unlockPlayerAchievementInstruction)(this.program, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.addFungibleRewardStep = function (args, authority, newReward, achievement, sourceTokenAccount, tokenAccountOwner, mint, game, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.addFtRewardAccounts(authority, newReward, achievement, sourceTokenAccount, tokenAccountOwner, mint, game, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.addFtRewardInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.addNonFungibleRewardStep = function (args, authority, newReward, achievement, collectionMint, collectionUpdateAuthority, game, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.addNftRewardAccounts(authority, newReward, achievement, collectionMint, collectionUpdateAuthority, game, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.addNftRewardInstruction)(this.program, args, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.claimNftRewardStep = function (authority, achievement, mint, user, reward, game, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.claimNftRewardAccounts(authority, achievement, mint, user, reward, game, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.claimNftRewardInstruction)(this.program, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.claimFtRewardStep = function (authority, achievement, user, reward, game) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, omitted, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.claimFtRewardAccounts(authority, achievement, user, reward, game)];
                    case 1:
                        accounts = _a.sent();
                        omitted = __assign({}, accounts);
                        return [4, (0, rawInstructions_1.claimFtRewardInstruction)(this.program, omitted)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.verifyPlayerNftRewardStep = function (user, achievement, mint, reward, game, payer) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, instruction;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.accounts.verifyNftRewardAccounts(user, achievement, mint, reward, game, payer)];
                    case 1:
                        accounts = _a.sent();
                        return [4, (0, rawInstructions_1.verifyNftRewardInstruction)(this.program, accounts)];
                    case 2:
                        instruction = _a.sent();
                        return [2, [this.append([instruction]), accounts]];
                }
            });
        });
    };
    InstructionBuilder.prototype.sign = function (signers) {
        this.signers = this.signers.concat(signers);
    };
    InstructionBuilder.prototype.build = function () {
        var transaction = new web3_js_1.Transaction();
        this.instructions.forEach(function (ix) { return transaction.add(ix); });
        this.clean();
        return transaction;
    };
    InstructionBuilder.prototype.clean = function () {
        this.instructions = [];
    };
    InstructionBuilder.prototype.complete = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.provider
                        .sendAndConfirm(this.build(), this.signers, opts)
                        .catch(function (e) {
                        throw e;
                    })];
            });
        });
    };
    return InstructionBuilder;
}());
exports.InstructionBuilder = InstructionBuilder;
//# sourceMappingURL=ixBuilder.js.map